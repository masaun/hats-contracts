// SPDX-License-Identifier: MIT
pragma solidity 0.8.16;

//@dev - Foundry
import { Test } from "forge-std/Test.sol";

import "forge-std/console.sol";

//@dev - Target contract
import { RewardController } from "../../contracts/RewardController.sol";


/**
 * @notice - The test of exploit of the RewardController.sol in Foundry
 */
contract RewardControllerExploitTest is Test {

    //@dev - Smart contract instances
    RewardController public rewardController;

    address GOVERNANCE = makeAddr("governance");
    address MINTER = makeAddr("minter");

    address ATTACKER = makeAddr("attacker");


    /**
     * @dev - Constructor
     */ 
    function setUp() public {
        //@dev - Deploy the RewardController.sol
        rewardController = new RewardController(GOVERNANCE);
        console.log("Deployed-address of the RewardController.sol:", address(rewardController));
    }

    /**
     * @dev - Check initial states
     */ 
    function testCheck_initialStates() public {
        //@dev - EOA wallet address of attacker
        console.log("EOA wallet address of attacker:", ATTACKER);
    }

    /**
     * @dev - Execute a test to show exploit using updateVault() method in the RewardController.sol
     */ 
    function testExploit_updateVault() public {
        vm.startPrank(ATTACKER);
        vm.stopPrank();

        //@dev - Check the result of this exploit:
        //assertEq();

        console.log("Successful to run testExploit_updateVault()");
    }

}