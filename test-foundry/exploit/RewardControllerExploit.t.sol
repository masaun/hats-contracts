// SPDX-License-Identifier: MIT
pragma solidity 0.8.16;

//@dev - Foundry
import { Test } from "forge-std/Test.sol";

import "forge-std/console.sol";

//@dev - Target contract
import { RewardController } from "../../contracts/RewardController.sol";


/**
 * @notice - The test of exploit of the RewardController.sol in Foundry
 */
contract RewardControllerExploitTest is Test {

    //@dev - Smart contract instances
    RewardController public rewardController;

    address GOVERNANCE = makeAddr("governance");
    address MINTER = makeAddr("minter");

    address ATTACKER = makeAddr("attacker");


    /**
     * @dev - Constructor
     */ 
    function setUp() public {
        //@dev - Deploy the RewardController.sol
        address _rewardToken = "0x51a6Efc15c50EcE1DaAD1Ee4fbF8DEC76584c365";
        address _hatsGovernance = "0xBA5Ddb6Af728F01E91D77D12073548D823f6D1ef";
        uint256 _startRewardingBlock = 0;
        uint256 _epochLength = 195200;
        uint256[24] memory _epochRewardPerBlock = [
            4413 * 1e17,  // 441.3
            4413 * 1e17,
            8825 * 1e17,
            7788 * 1e17,
            6873 * 1e17,
            6065 * 1e17,
            5353 * 1e17,
            4724 * 1e17,
            4169 * 1e17,
            3679 * 1e17,
            3247 * 1e17,
            2865 * 1e17,
            2528 * 1e17,
            2231 * 1e17,
            1969 * 1e17,
            1738 * 1e17,
            1534 * 1e17,
            1353 * 1e17,
            1194 * 1e17,
            1054 * 1e17,
            93 * 1e17,
            821 * 1e17,
            724 * 1e17,
            639 * 1e17
        ];


        rewardController = new RewardController(
            _rewardToken,
            _hatsGovernance,
            _startRewardingBlock,
            _epochLength,
            _epochRewardPerBlock
        );
        console.log("Deployed-address of the RewardController.sol:", address(rewardController));
    }

    /**
     * @dev - Check initial states
     */ 
    function testCheck_initialStates() public {
        //@dev - EOA wallet address of attacker
        console.log("EOA wallet address of attacker:", ATTACKER);
    }

    /**
     * @dev - Execute a test to show exploit using updateVault() method in the RewardController.sol
     */ 
    function testExploit_updateVault() public {
        vm.startPrank(ATTACKER);
        vm.stopPrank();

        //@dev - Check the result of this exploit:
        //assertEq();

        console.log("Successful to run testExploit_updateVault()");
    }

}